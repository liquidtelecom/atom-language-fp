name: 'CES'
scopeName: 'source.ces'
fileTypes: ["ces", "wo", "trn", "dm"]
patterns: [
    # Keywords
    {
        match: '\\b(undefined|defined|PROC|ENDPROC|MAP|ENDMAP|MAP_TABLE|STATE|LIST_LENGTH|LOCAL|WO_MAPPER|MAP_FWD|MAP_BWD|CHK)\\b'
        name: 'keyword.ces'
    }
    {
        match: '\\b(FORMAT_LIST|FORMAT_NUMERIC|FORMAT_COMMAND|FORMAT_MESSAGE|FORMAT|TOKENIZE|CALL_PROC|CALL_MAP|CALL_CODE|UNDEF_LIST|SPLIT)\\b'
        name: 'support.function.ces'
    }
    {
        match: '\\b(IF|ELSE|ELIF|FI|WHILE|WEND)\\b'
        name: 'keyword.control.ces'
    }
    {
        match: '\\b(RSP|RETURN)\\b'
        name: 'keyword.control.statement.ces'
    }
    {
        match: "\\b(AND|OR)\\b"
        name: 'keyword.operator.logical.ces'
    }

    # Variables
    {
        begin: '<'
        end: '>'
        patterns: [
            {
                include: '#variable_braces'
            }
        ]
        name: 'variable.ces'
    }

    # Lanuagage reserved
    {
        match: '\\b(Result_OK|OK|KOFunc|KOTech)\\b'
        name: 'variable.language.ces'
    }

    {
        match: '=(.*)$'
        captures:
            1:
                name: "string.unquoted.ces"
    }

    # Regular expressions
    {
        match: "~(.*)"
        captures:
            1:
                name: 'string.regexp.ces'
    }

    # Comments
    {
        match: '\/\/.*$\\n?'
        name: 'comment.ces'
    }
    {
        match: '^\\s*#.*$'
        name: 'comment.ces'
    }
]

repository:
    variable_braces:
        {
            begin: '<'
            end: '>'
            patterns: [
                {
                    match: '[a-zA-Z0-9]+'
                    name: 'variable.ces'
                }
                {
                    include: '#variable_braces'
                }
            ]
        }
